segments(rep(1,52), mrg[,3])
segments(rep(1999,52), mrg[,2], rep(2012,52), mrg[,3])
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y, ]
library(data.table)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "gdp.csv")
download.file(fileUrl2, f)
gdp <- data.table(read.csv(f, skip = 4, nrows = 215))
gdp <- gdp[X != ""]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
head(gdp)
gdp
dtEd
merge(gpd, dtEd, all = TRUE, by = c("CountryCode"))
merge(gdp, dtEd, all = TRUE, by = c("CountryCode"))
names(gdp)
names(gdp) <- c("CountryCode", "X.1" "X.2" "X.3" "X.4" "X.5" "X.6" "X.7" "X.8" "X.9")
names(gdp) <- c("CountryCode", "X.1", "X.2", "X.3", "X.4", "X.5", "X.6", "X.7", "X.8", "X.9")
a <- merge(gdp, dtEd, all = TRUE, by = c("CountryCode"))
a
str(a)
head(gdp)
sort(a, a$X.1, decreasing = TRUE)
sort(a$X.1, decreasing = TRUE)
dim(sort(a$X.1, decreasing = TRUE))
sort(a$X.1, decreasing = TRUE)
sort(a$X.1, decreasing = TRUE)[13]
a[a$X.1 = 178]
a[a$X.1 == 178]
sum(!is.na(unique(a$X.1)))
names(dtEd)
a[sort(a$X.1, decreasing = TRUE), list(CountryCode, Long.Name)][13]
gdp <- gdp[, list(X, X.1, X.3, X.4)]
setnames(gdp, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "gdp.csv")
download.file(fileUrl2, f)
gdp <- data.table(read.csv(f, skip = 4, nrows = 215))
gdp <- gdp[X != ""]
gdp <- gdp[, list(X, X.1, X.3, X.4)]
setnames(gdp, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
a <- merge(gdp, dtEd, all = TRUE, by = c("CountryCode"))
sum(!is.na(unique(a$X.1)))
a <- merge(gdp, dtEd, all = TRUE, by = c("CountryCode"))
a
sum(!is.na(unique(a$rankingGDP)))
head(gdp)
a[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)]
a[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
head(gdp)
head(a$Income.Group)
ave(a$Income.Group == "nonOECD")
mean(a$gdp, a$Income.Group == "nonOECD")
a[a$Income.Group == "nonOECD"]
a$Income.Group
a$Income.Group[1]
factor(a$Income.Group)
factor(a$Income.Group)[1]
a[, mean(rankingGDP, na.rm = TRUE), by = a$Income.Group]
quantile(a$rankingGDP, na.rm = TRUE)
table(a$CountryCode, a$Income.Group)
mayorIngreso <- a[order(rankingGDP, decreasing = FALSE),
list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][1:38]
mayorIngreso
mayorIngreso <- a[order(rankingGDP, decreasing = FALSE),
list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp, Income.Group)][1:38]
mayorIngreso
table(mayorIngreso$CountryCode, mayorIngreso$Income.Group)
colSums(table(mayorIngreso$CountryCode, mayorIngreso$Income.Group))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "housingIdaho.csv")
download.file(url, f)
housingIdaho <- data.table(read.csv(f))
head(housingIdaho)
splitNames <- strsplit(names(housingIdaho), "wgtp")
splitNames
splitNames[123]
library(data.table)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "gdp.csv")
download.file(fileUrl2, f)
gdp <- data.table(read.csv(f, skip = 4, nrows = 215))
gdp <- gdp[X != ""]
gdp <- gdp[, list(X, X.1, X.3, X.4)]
setnames(gdp, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
head(gdp)
sub(",", "", gdp$gdp,)
sum(!is.na(sub(",", "", gdp$gdp, )))
sub(",", "", gdp$gdp, )
numeric(sub(",", "", gdp$gdp, ))
gsub(",", "", gdp$gdp, )
gsub(",", "", str_trim(gdp$gdp), )
library(stringr)
gsub(",", "", str_trim(gdp$gdp), )
d <- gsub(",", "", str_trim(gdp$gdp))
d
d <- gsub("..", "0", d)
d
d <- gsub(",", "", str_trim(gdp$gdp))
d
as.numeric(d)
d <- as.numeric(d)
mean(d, na.rm = TRUE)
gdp
grep("United$", gdp$Long.Name)
grep("^United", gdp$Long.Name)
grep("United", gdp$Long.Name)
grep("United$", gdp$Long.Name)
grep("^United", gdp$Long.Name)
grep("*United", gdp$Long.Name)
grep("United", gdp$Long.Name)
grep("^United", gdp$Long.Name, value = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
a <- merge(gdp, dtEd, all = TRUE, by = c("CountryCode"))
a$PPP.survey.year
a$National.accounts.base.year
a$National.accounts.reference.year
a$PPP.survey.year
a
a$Special.Notes
grep("Fiscal year end: June",a$Special.Notes)
endFiscalYearJune <- dim(grep("Fiscal year end: June",a$Special.Notes))
endFiscalYearJune
endFiscalYearJune <- grep("Fiscal year end: June",a$Special.Notes)
str(endFiscalYearJune)
endFiscalYearJune
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
grep("^2012", sampleTimes)
dim(grep("^2012", sampleTimes))
d_2012 <- grep("^2012", sampleTimes)
d_2012
as.list(d_2012)
dim(as.list(d_2012))
sampleTimes
amzn
sampleTimes
as.Date(sampleTimes[1])
str(sampleTimes)
weekdays(sampleTimes[1])
weekdays(d_2012)
d_2012 <- as.Date(grep("^2012", sampleTimes))
weekdays(d_2012)
d_2012[weekdays(d_2012) == "Monday"]
d_2012
(grep("^2012", sampleTimes)
)
sampleTimes[1499]
d_2012 <- (grep("^2012", sampleTimes))
d_2012
which(sampleTimes, arr.ind = TRUE, useNames = d_2012)
index_2012 <- (grep("^2012", sampleTimes))
sampleTimes[index_2012]
d_2012 <- sampleTimes[index_2012]
d_2012[weekdays() == "Monday"]
d_2012[weekdays(d_2012) == "Monday"]
respuesta <- d_2012[weekdays(d_2012) == "Monday"]
respuesta
dim(respuesta)
respuesta <- data.frame(respuesta)
dim(respuesta)
filename <- "activityt.zip"
unzip(filename)
f <- file.path(getwd(), "activity.csv")
housingIdaho <- data.table(read.csv(f))
library(data.table)
filename <- "activityt.zip"
unzip(filename)
f <- file.path(getwd(), "activity.csv")
housingIdaho <- data.table(read.csv(f))
getwd()
library(data.table)
filename <- "activityt.zip"
unzip(filename)
housingIdaho <- data.table(read.csv(filename))
library(data.table)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
f <- file.path(getwd(), "activity.csv")
download.file(url, f)
activity <- data.table(read.csv(f))
activity
str(activity)
head(activity)
activity <- read.csv(f, sep = ",", header = TRUE)
activity
head(activity)
head(activity$PK...)
activity[1]
data.frame(activity)
activity <- read.csv(f, colClasses=c("numeric","character","numeric"), header = TRUE, sep = ",")
activity <- read.csv(f, colClasses=c("numeric","character","numeric"), header = TRUE, sep = ",")
activity <- read.csv(f, colClasses=c("numeric","character","numeric"),
header = TRUE, sep = ",", na.strings = 'NULL')
head(activity)
activity <- read.csv("activity.csv", stringsAsFactors=FALSE)
activity <- read.csv("activity.csv", stringsAsFactors=FALSE)
str(activity)
activity <- read.csv(f, colClasses=c("numeric","character","numeric"),
header = TRUE, sep = ",", na.strings = 'NULL', stringsAsFactors=FALSE)
activity <- read.csv(f,
header = TRUE, sep = ",", na.strings = 'NULL', stringsAsFactors=FALSE)
summary(activity)
setwd("/Users/marlonvinan/Documents/Doctorado/Reproducible_research_course/RepData_PeerAssessment1")
unzip("activity.zip")
activity <- read.csv("activity.csv")
str(activity)
summary(activity)
library(ggplot2)
qplot(activity$steps, geom = "histogram")
library(ggplot2)
totalSteps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
library(ggplot2)
totalSteps <- tapply(activity$steps, activity$date, FUN=sum, na.rm=TRUE)
qplot(totalSteps, geom = "histogram")
mean(totalSteps)
qplot(activity$steps, geom = "histogram")
library(ggplot2)
totalSteps <- tapply(activity$steps, activity$date, FUN=sum, na.rm=TRUE)
qplot(totalSteps, geom = "histogram")
mean(totalSteps, na.rm = TRUE)
library(ggplot2)
totalSteps <- tapply(activity$steps, activity$date, FUN=sum, na.rm=TRUE)
qplot(totalSteps, geom = "histogram", xlab = "Total number of steps taken per day")
mean(totalSteps, na.rm = TRUE)
library(ggplot2)
totalSteps <- tapply(activity$steps, activity$date, FUN=sum, na.rm=TRUE)
qplot(totalSteps, geom = "histogram", xlab = "Total number of steps taken per day", binwidth = 1000)
mean(totalSteps, na.rm = TRUE)
library(ggplot2)
totalSteps <- tapply(activity$steps, activity$date, FUN=sum, na.rm=TRUE)
qplot(totalSteps, geom = "histogram", xlab = "Total number of steps taken per day")
mean(totalSteps, na.rm = TRUE)
library(ggplot2)
totalSteps <- tapply(activity$steps, activity$date, FUN=mean, na.rm=TRUE)
qplot(totalSteps, geom = "histogram", xlab = "Total number of steps taken per day")
mean(totalSteps, na.rm = TRUE)
median(totalSteps, na.rm = TRUE)
head(activity)
plot(activity$interval, mean(activity$steps), type = "l", xlab = "5-minute interval",
ylab = "Averaged number of steps taken")
plot(activity$interval, activity$steps, type = "l", xlab = "5-minute interval",
ylab = "Averaged number of steps taken")
plot(factor(activity$interval), mean(activity$steps), type = "l", xlab = "5-minute interval",
ylab = "Averaged number of steps taken")
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
averages
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
max(averages, by=c(averages$steps))
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
averages[which.max(averages$steps)]
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
averages <- data.frame(averages)
averages[which.max(averages$steps)]
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
averages <- data.frame(averages)
averages[which.max(averages$steps)]
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
averages[which.max(averages$steps),]
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
averages[which.max(averages$steps),]
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
averages <- data.frame(averages)
averages[which.max(averages$steps),]
sum(is.na(activity))
missing <- is.na(activity$steps)
table(missing())
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
averages <- data.frame(averages)
averages[which.max(averages$steps),]
missing <- is.na(activity$steps)
table(missing)
averages
activity
missing <- is.na(activity$steps)
table(missing)
activityMissing <- activity
missing <- is.na(activity$steps)
table(missing)
activity[missing,]
averages[averages$interval == interval, "steps"]
averages[averages$interval == 5, "steps"]
missing <- is.na(activity$steps)
table(missing)
fillMissing <- function(steps, interval){
filled <- NA
if(is.na(steps)){
filled <- averages[averages$interval == interval, "steps"]
}
return(filled)
}
fillActivity <- activity
missing <- is.na(activity$steps)
table(missing)
fillMissing <- function(steps, interval){
filled <- NA
if(is.na(steps)){
filled <- averages[averages$interval == interval, "steps"]
}
return(filled)
}
fillActivity <- activity
fillActivity$steps <- mapply(fillMissing, activity$steps, activity$interval)
dim(fillActivity)
dim(activity)
is.na(fillActivity$steps)
is.na(fillActivity$steps)
missing <- is.na(activity$steps)
table(missing)
fillMissing <- function(steps, interval){
filled <- NA
if(is.na(steps)){
filled <- averages[averages$interval == interval, "steps"]
}
return(filled)
}
fillActivity <- activity
fillActivity$steps <- mapply(fillMissing, fillActivity$steps, fillActivity$interval)
dim(fillActivity)
dim(activity)
is.na(fillActivity)
is.na(fillActivity$steps)
fillActivity[991]
fillActivity[991,]
unzip("activity.zip")
activity <- read.csv("activity.csv")
str(activity)
summary(activity)
library(ggplot2)
totalSteps <- tapply(activity$steps, activity$date, FUN=sum, na.rm=TRUE)
qplot(totalSteps, geom = "histogram", xlab = "Total number of steps taken per day")
mean(totalSteps, na.rm = TRUE)
median(totalSteps, na.rm = TRUE)
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
str(averages)
plot(averages$interval, averages$steps, type = "l", xlab = "5-minute interval",
ylab = "Average number of steps taken")
averages <- data.frame(averages)
averages[which.max(averages$steps),]
missing <- is.na(activity$steps)
table(missing)
fillMissing <- function(steps, interval){
filled <- NA
if(is.na(steps)){
filled <- averages[averages$interval == interval, "steps"]
}
return(filled)
}
fillActivity <- activity
fillActivity$steps <- mapply(fillMissing, fillActivity$steps, fillActivity$interval)
dim(fillActivity)
dim(activity)
is.na(fillActivity)
is.na(fillActivity$steps)
missing <- is.na(activity$steps)
table(missing)
fillMissing <- function(steps, interval){
filled <- NA
if(is.na(steps)){
filled <- averages[averages$interval == interval, "steps"]
}else{
filled <- steps
}
return(filled)
}
fillActivity <- activity
fillActivity$steps <- mapply(fillMissing, fillActivity$steps, fillActivity$interval)
dim(fillActivity)
dim(activity)
is.na(fillActivity$steps)
is.na(fillActivity$steps) == TRUE
missing <- is.na(activity$steps)
table(missing)
fillMissing <- function(steps, interval){
filled <- NA
if(is.na(steps)){
filled <- averages[averages$interval == interval, "steps"]
}else{
filled <- steps
}
return(filled)
}
fillActivity <- activity
fillActivity$steps <- mapply(fillMissing, fillActivity$steps, fillActivity$interval)
totalStepsFilled <- tapply(fillActivity$steps, filledActivity$date, FUN=sum, na.rm=TRUE)
missing <- is.na(activity$steps)
table(missing)
fillMissing <- function(steps, interval){
filled <- NA
if(is.na(steps)){
filled <- averages[averages$interval == interval, "steps"]
}else{
filled <- steps
}
return(filled)
}
fillActivity <- activity
fillActivity$steps <- mapply(fillMissing, fillActivity$steps, fillActivity$interval)
totalStepsFilled <- tapply(fillActivity$steps, fillActivity$date, FUN=sum, na.rm=TRUE)
qplot(totalStepsFilled, geom = "histogram", xlab = "Total number of steps taken per day")
mean(totalStepsFilled, na.rm = TRUE)
median(totalStepsFilled, na.rm = TRUE)
library(ggplot2)
totalSteps <- tapply(activity$steps, activity$date, FUN=sum, na.rm=TRUE)
qplot(totalSteps, geom = "histogram", xlab = "Total number of steps taken per day")
mean(totalSteps, na.rm = TRUE)
median(totalSteps, na.rm = TRUE)
fillActivity$date <- as.Date(fillActivity$date)
#create a vector of weekdays
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#Use `%in%` and `weekdays` to create a logical vector
#convert to `factor` and specify the `levels/labels`
fillActivity$wDay <- factor((weekdays(fillActivity$date) %in% weekdays1),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday')
str(fillActivity)
fillActivity$date <- as.Date(fillActivity$date)
#create a vector of weekdays
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#Use `%in%` and `weekdays` to create a logical vector
#convert to `factor` and specify the `levels/labels`
fillActivity$wDay <- factor((weekdays(fillActivity$date) %in% weekdays1),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday')
str(fillActivity)
fillActivity$date <- as.Date(fillActivity$date)
#create a vector of weekdays
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#Use `%in%` and `weekdays` to create a logical vector
#convert to `factor` and specify the `levels/labels`
fillActivity$wDay <- factor((weekdays(fillActivity$date) %in% weekdays1),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday')
str(fillActivity)
fillActivity$date <- as.Date(fillActivity$date)
# create a vector of weekdays
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
# Use `%in%` and `weekdays` to create a logical vector
# convert to `factor` and specify the `levels/labels`
fillActivity$wDay <- factor((weekdays(fillActivity$date) %in% weekdays1),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday'))
str(fillActivity)
fillActivity$date <- as.Date(fillActivity$date)
# create a vector of weekdays
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
fillActivity$wDay <- factor((weekdays(fillActivity$date) %in% weekdays1),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday'))
str(fillActivity)
fillActivity
